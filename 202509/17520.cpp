#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
using namespace std;

int dp[100001] = {0, };

int main () {
    
    int n;
    cin >> n;
    cin.tie(0); ios_base::sync_with_stdio(0);
    dp[0] = 0; dp[1] = 2;
    for (int i = 2; i <= n; i++) {
        if (i % 2 == 0) { dp[i] = dp[i-1] % 16769023; } // 짝수 : 그대로
        else dp[i] = (dp[i-1] * 2) % 16769023; // 홀수 : 이전 경우의수 2배
    }
    cout << dp[n] << '\n';
    
    // dp[n] = dp[n-2] + dp[n-1]
    // dp[0] - 길이0에서 만들 수 있는 밸런스 스트링 = 0
    // dp[1] - 길이1에서 만들 수 있는 밸런스 스트링 0, 1 = 2
    // dp[2] - 길이2에서 만들 수 있는 밸런스 스트링 01, 10 = 2
    // dp[3] - 길이3에서 만들 수 있는 밸런스 스트링 010, 101, 011, 100 = 4
    // ... n
    // dp[4] - 길이4에서 만들 수 있는 밸런스 스트링 0101, 1010, 0110, 1001 = 4
    
    // 짝 -> 홀 ... 경우의수 2배
    // 홀 -> 짝 ... 경우의수 그대로
    
    // ... 전에서 0 or 1 추가
    // 조건은? 개수차가 1 이하이어야 한다.
    // 어떻게 판단할것인가?
    
}

// "Balanced String"
// 0101101 0 : 3개, 1 : 4개 (0과 1의 개수 차이가 1이하)
// 01과 1의 개수 차이가 1이하인 문자열을 균형잡힌 문자열 이라고 부른다.
// 양의 정수 n이 주어질 때, 길이가 n인 이진 문자열 중에서 균형잡힌 문자열의 수를 구하라
